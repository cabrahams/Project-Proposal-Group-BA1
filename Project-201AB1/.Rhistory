print(sum(X <= 100) * (1 / 1000))
print(sum(X <= 102 & X > 98) * (1 / 1000) * 100)
print(mean(Z))
print(sd(Z))
x <- c(96, 97, 98, 99, 100, 101, 102, 103, 104)
p <- c(.15, .12, .14, .25, .17, .06, .05, .04, .02)
X <- sample(x, 1000, replace=T, prob=p) # sample 1000 times from the distribution
Z <- 800-300*(X-100)*(X > 100) # compute the profit
hist(X,main = "simulated data")
print(sum(X <= 100) * (1 / 1000))
print(sum(98 < X & X <= 102) * (1 / 1000) * 100)
print(mean(Z))
print(sd(Z))
x <- c(96, 97, 98, 99, 100, 101, 102, 103, 104)
p <- c(.15, .12, .14, .25, .17, .06, .05, .04, .02)
X <- sample(x, 1000, replace=T, prob=p) # sample 1000 times from the distribution
Z <- 800-300*(X-100)*(X > 100) # compute the profit
hist(X,main = "simulated data")
print(sum(X <= 100) * (1 / 1000))
print(sum(98 < X & X <= 102) * (1 / 1000))
print(mean(Z))
print(sd(Z))
x <- c(96, 97, 98, 99, 100, 101, 102, 103, 104)
p <- c(.15, .12, .14, .25, .17, .06, .05, .04, .02)
X <- sample(x, 1000, replace=T, prob=p) # sample 1000 times from the distribution
Z <- 800-300*(X-100)*(X > 100) # compute the profit
hist(X,main = "simulated data")
print(sum(X <= 100) / 1000)
print(sum(98 < X & X <= 102) / 1000)
print(mean(Z))
print(sd(Z))
x <- c(96, 97, 98, 99, 100, 101, 102, 103, 104)
p <- c(.15, .12, .14, .25, .17, .06, .05, .04, .02)
X <- sample(x, 1000, replace=T, prob=p) # sample 1000 times from the distribution
Z <- 800-300*(X-100)*(X > 100) # compute the profit
hist(X,main = "simulated data")
print(sum(X <= 100) / 1000)
print(sum(98 < X & X <= 102) / 1000)
print(mean(Z))
print(sd(Z))
x <- c(96, 97, 98, 99, 100, 101, 102, 103, 104)
p <- c(.15, .12, .14, .25, .17, .06, .05, .04, .02)
X <- sample(x, 1000, replace=T, prob=p) # sample 1000 times from the distribution
Z <- 800-300*(X-100)*(X > 100) # compute the profit
hist(X,main = "simulated data")
print(sum(X <= 100) / 1000)
print(sum(98 < X & X <= 102) / 1000)
print(mean(Z))
print(sd(Z))
x <- c(96, 97, 98, 99, 100, 101, 102, 103, 104)
p <- c(.15, .12, .14, .25, .17, .06, .05, .04, .02)
X <- sample(x, 1000, replace=T, prob=p) # sample 1000 times from the distribution
Z <- 800-300*(X-100)*(X > 100) # compute the profit
hist(X,main = "simulated data")
print(sum(X <= 100) / 1000)
print(sum(98 < X & X <= 102) / 1000)
print(mean(Z))
print(sd(Z))
X
head(X)
head(X, 10)
x <- c(96, 97, 98, 99, 100, 101, 102, 103, 104)
p <- c(.15, .12, .14, .25, .17, .06, .05, .04, .02)
X <- sample(x, 1000, replace=T, prob=p) # sample 1000 times from the distribution
Z <- 800-300*(X-100)*(X > 100) # compute the profit
print(head(X, 10))
print(head(Z, 10))
hist(X,main = "simulated data")
print(sum(X <= 100) / 1000)
print(sum(98 < X & X <= 102) / 1000)
print(mean(Z))
print(sd(Z))
x <- c(96, 97, 98, 99, 100, 101, 102, 103, 104)
p <- c(.15, .12, .14, .25, .17, .06, .05, .04, .02)
X <- sample(x, 1000, replace=T, prob=p) # sample 1000 times from the distribution
Z <- 800-300*(X-100)*(X > 100) # compute the profit
print(head(X, 10))
print(head(Z, 10))
hist(X,main = "simulated data")
print(sum(X <= 100) / 1000 * 100)
print(sum(98 < X & X <= 102) / 1000 * 100)
print(mean(Z))
print(sd(Z))
a <- 1 + 2/0
a <- 1 + 2/0
a <- 1 + 2/
a <- 1 + 2/0
a <- 1 + 2/0
a <- 1 + 2/0
clear
a <- 1 + 2/0
a
a <- 1 + 2/0
a <- 1 + 2/0
a <- 1 + 2/
a
cat("hi\n!
hihi")
cat("hi\n!
hihi")
1x <- 1
a <- 1
a
HowManyAttempts Retained <- 1
竹
竹 <- 1
竹
中华认命 <- 4
中华认命
中华认命 * 54
f <- pow(x, y) {
print(pow(2,3))
print(f(2,3))
distance(2,2,2)
distance <- function(x, y, z) {
sqrt(x^2 + y^2 + z^2)
}
distance(2,2,2)
distance(2,2,0)
distance(1,1,0)
distance <- function(x, y, z) {
sqrt(x^2 + y^2 + z^2)
}
distance(1,1,0)
pow(2,3)
f <- pow(x, y) {
f <- pow(x, y) {
f <- function(x, y) {
print(y)
x^y
}
f(2,3)
setwd("~/INFO201/Project-Proposal-Group-BA1/Project-201AB1")
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(tidyverse)
library(ggplot2)
dataset <- read_delim("nces330_20.csv") %>%
filter(Expense == "Fees/Tuition")
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Tutition By Year data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("year",
"Year Range",
min = 2013,
max = 2022,
value = c(2013, 2022)),
checkboxGroupInput("variable", "Type of values to show",
c("General" = "General",
"Private" = "Private",
"Public In-State" = "Public In-State",
"Public Out-of-State" = "Public Out-of-State"))
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
),
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
# x    <- faithful[, 2]
# bins <- seq(min(x), max(x), length.out = input$bins + 1)
dataset2 <- dataset %>%
filter(Year >= input$year[1], Year <= input$year[2])
datamean <- dataset2 %>%
group_by(Year) %>%
summarise(mean = mean(Value)) %>%
mutate(Type = "General")
datasep <- dataset2 %>%
group_by(Year, Type) %>%
filter(Type %in% input$variable) %>%
summarise(mean = mean(Value))
dataUsing = rbind(datamean, datasep)
print(input$variable)
# dataUsing <- data.frame(Year = unique(datasep$Year),
#                         General = datamean$mean,
#                         Private = datasep[datasep$Type == "Private", ]$mean,
#                         PublicOS =
#                             datasep[datasep$Type == "Public Out-of-State", ]$mean,
#                         PublicIS = datasep[datasep$Type == "Public In-State", ]$mean)
# draw the histogram with the specified number of bins
ggplot(dataUsing, aes(x = Year, y = mean, group = Type)) +
geom_line(aes(color = Type)) +
geom_point(aes(color = Type)) +
ggtitle("Tuition over year") +
xlab("Year") +
ylab("Tuition") +
scale_y_continuous(limits = max(dataUsing$mean)) +
scale_x_continuous(breaks = seq(min(dataUsing$Year),
max(dataUsing$Year), by = 1))
})
}
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(tidyverse)
library(ggplot2)
dataset <- read_delim("nces330_20.csv") %>%
filter(Expense == "Fees/Tuition")
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Tutition By Year data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("year",
"Year Range",
min = 2013,
max = 2022,
value = c(2013, 2022)),
checkboxGroupInput("variable", "Type of values to show",
c("General" = "General",
"Private" = "Private",
"Public In-State" = "Public In-State",
"Public Out-of-State" = "Public Out-of-State"))
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
),
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
# x    <- faithful[, 2]
# bins <- seq(min(x), max(x), length.out = input$bins + 1)
dataset2 <- dataset %>%
filter(Year >= input$year[1], Year <= input$year[2])
datamean <- dataset2 %>%
group_by(Year) %>%
summarise(mean = mean(Value)) %>%
mutate(Type = "General")
datasep <- dataset2 %>%
group_by(Year, Type) %>%
filter(Type %in% input$variable) %>%
summarise(mean = mean(Value))
dataUsing = rbind(datamean, datasep)
print(input$variable)
# dataUsing <- data.frame(Year = unique(datasep$Year),
#                         General = datamean$mean,
#                         Private = datasep[datasep$Type == "Private", ]$mean,
#                         PublicOS =
#                             datasep[datasep$Type == "Public Out-of-State", ]$mean,
#                         PublicIS = datasep[datasep$Type == "Public In-State", ]$mean)
# draw the histogram with the specified number of bins
ggplot(dataUsing, aes(x = Year, y = mean, group = Type)) +
geom_line(aes(color = Type)) +
geom_point(aes(color = Type)) +
ggtitle("Tuition over year") +
xlab("Year") +
ylab("Tuition") +
scale_y_continuous(limits = c(0, max(dataUsing$mean))) +
scale_x_continuous(breaks = seq(min(dataUsing$Year),
max(dataUsing$Year), by = 1))
})
}
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(tidyverse)
library(ggplot2)
dataset <- read_delim("nces330_20.csv") %>%
filter(Expense == "Fees/Tuition")
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Tutition By Year data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("year",
"Year Range",
min = 2013,
max = 2022,
value = c(2013, 2022)),
checkboxGroupInput("variable", "Type of values to show",
c("General" = "General",
"Private" = "Private",
"Public In-State" = "Public In-State",
"Public Out-of-State" = "Public Out-of-State"))
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
),
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
# x    <- faithful[, 2]
# bins <- seq(min(x), max(x), length.out = input$bins + 1)
dataset2 <- dataset %>%
filter(Year >= input$year[1], Year <= input$year[2])
datamean <- dataset2 %>%
group_by(Year) %>%
summarise(mean = mean(Value)) %>%
mutate(Type = "General")
datasep <- dataset2 %>%
group_by(Year, Type) %>%
summarise(mean = mean(Value))
dataUsing = rbind(datamean, datasep) %>%
filter(Type %in% input$variable)
print(input$variable)
# dataUsing <- data.frame(Year = unique(datasep$Year),
#                         General = datamean$mean,
#                         Private = datasep[datasep$Type == "Private", ]$mean,
#                         PublicOS =
#                             datasep[datasep$Type == "Public Out-of-State", ]$mean,
#                         PublicIS = datasep[datasep$Type == "Public In-State", ]$mean)
# draw the histogram with the specified number of bins
ggplot(dataUsing, aes(x = Year, y = mean, group = Type)) +
geom_line(aes(color = Type)) +
geom_point(aes(color = Type)) +
ggtitle("Tuition over year") +
xlab("Year") +
ylab("Tuition") +
scale_y_continuous(limits = c(0, max(dataUsing$mean))) +
scale_x_continuous(breaks = seq(min(dataUsing$Year),
max(dataUsing$Year), by = 1))
})
}
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(tidyverse)
library(ggplot2)
dataset <- read_delim("nces330_20.csv") %>%
filter(Expense == "Fees/Tuition")
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Tutition By Year data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("year",
"Year Range",
min = 2013,
max = 2022,
value = c(2013, 2022)),
checkboxGroupInput("variable", "Type of values to show",
c("General" = "General",
"Private" = "Private",
"Public In-State" = "Public In-State",
"Public Out-of-State" = "Public Out-of-State"),
selected = c("General"))
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
),
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
# x    <- faithful[, 2]
# bins <- seq(min(x), max(x), length.out = input$bins + 1)
dataset2 <- dataset %>%
filter(Year >= input$year[1], Year <= input$year[2])
datamean <- dataset2 %>%
group_by(Year) %>%
summarise(mean = mean(Value)) %>%
mutate(Type = "General")
datasep <- dataset2 %>%
group_by(Year, Type) %>%
summarise(mean = mean(Value))
dataUsing = rbind(datamean, datasep) %>%
filter(Type %in% input$variable)
print(input$variable)
# dataUsing <- data.frame(Year = unique(datasep$Year),
#                         General = datamean$mean,
#                         Private = datasep[datasep$Type == "Private", ]$mean,
#                         PublicOS =
#                             datasep[datasep$Type == "Public Out-of-State", ]$mean,
#                         PublicIS = datasep[datasep$Type == "Public In-State", ]$mean)
# draw the histogram with the specified number of bins
ggplot(dataUsing, aes(x = Year, y = mean, group = Type)) +
geom_line(aes(color = Type)) +
geom_point(aes(color = Type)) +
ggtitle("Tuition over year") +
xlab("Year") +
ylab("Tuition") +
scale_y_continuous(limits = c(0, max(dataUsing$mean))) +
scale_x_continuous(breaks = seq(min(dataUsing$Year),
max(dataUsing$Year), by = 1))
})
}
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(tidyverse)
library(ggplot2)
dataset <- read_delim("nces330_20.csv") %>%
filter(Expense == "Fees/Tuition")
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Tutition By Year data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("year",
"Year Range",
min = 2013,
max = 2022,
value = c(2013, 2022)),
checkboxGroupInput("variable", "Type of values to show",
c("General" = "General",
"Private" = "Private",
"Public In-State" = "Public In-State",
"Public Out-of-State" = "Public Out-of-State"),
selected = c("General", "Private",
"Public In-State",
"Public Out-of-State"))
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
),
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
# x    <- faithful[, 2]
# bins <- seq(min(x), max(x), length.out = input$bins + 1)
dataset2 <- dataset %>%
filter(Year >= input$year[1], Year <= input$year[2])
datamean <- dataset2 %>%
group_by(Year) %>%
summarise(mean = mean(Value)) %>%
mutate(Type = "General")
datasep <- dataset2 %>%
group_by(Year, Type) %>%
summarise(mean = mean(Value))
dataUsing = rbind(datamean, datasep) %>%
filter(Type %in% input$variable)
print(input$variable)
# dataUsing <- data.frame(Year = unique(datasep$Year),
#                         General = datamean$mean,
#                         Private = datasep[datasep$Type == "Private", ]$mean,
#                         PublicOS =
#                             datasep[datasep$Type == "Public Out-of-State", ]$mean,
#                         PublicIS = datasep[datasep$Type == "Public In-State", ]$mean)
# draw the histogram with the specified number of bins
ggplot(dataUsing, aes(x = Year, y = mean, group = Type)) +
geom_line(aes(color = Type)) +
geom_point(aes(color = Type)) +
ggtitle("Tuition over year") +
xlab("Year") +
ylab("Tuition") +
scale_y_continuous(limits = c(0, max(dataUsing$mean))) +
scale_x_continuous(breaks = seq(min(dataUsing$Year),
max(dataUsing$Year), by = 1))
})
}
# Run the application
shinyApp(ui = ui, server = server)
